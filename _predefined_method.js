exports.predefinedMethods = [
    {word: 'toString', desc: '[ECMAScript] Object.toString(Number: radix)'},
    {word: 'toLocaleString', desc: '[ECMAScript] Object.toLocaleString()'},
    {word: 'valueOf', desc: '[ECMAScript] Object.valueOf()'},
    {word: 'hasOwnProperty', desc: '[ECMAScript] Object.hasOwnProperty(String: prop)'},
    {word: 'isPrototypeOf', desc: '[ECMAScript] Object.isPrototypeOf(Object: obj)'},
    {word: '__lookupGetter__', desc: '[ECMAScript] Object.__lookupGetter__(sprop: String)'},
    {word: '__lookupSetter__', desc: '[ECMAScript] Object.__lookupSetter__(sprop: String)'},
    {word: '__defineGetter__', desc: '[ECMAScript] Object.__defineGetter__(sprop: String, fun: Function)'},
    {word: '__defineSetter__', desc: '[ECMAScript] Object.__defineSetter__(sprop: String, fun: Function)'},
    {word: 'concat', desc: '[ECMAScript] Array.concat(Array a1, Array a2, ...)'},
    {word: 'join', desc: '[ECMAScript] Array.join(String: separator)'},
    {word: 'pop', desc: '[ECMAScript] Array.pop()'},
    {word: 'push', desc: '[ECMAScript] Array.push(Object i1, Object i2, ...)'},
    {word: 'reverse', desc: '[ECMAScript] Array.reverse()'},
    {word: 'shift', desc: '[ECMAScript] Array.shift()'},
    {word: 'slice', desc: '[ECMAScript] Array.slice(Number: start_index, Number: end_index)'},
    {word: 'sort', desc: '[ECMAScript] Array.sort(Function: callback)'},
    {word: 'splice', desc: '[ECMAScript] Array.splice(start, delete_count, i1, i2, i3,...)'},
    {word: 'unshift', desc: '[ECMAScript] Array.unshift(Object: i1, Object: i2, ...)'},
    {word: 'apply', desc: '[ECMAScript] Function.apply(Object: this_obj, Array: params_array)'},
    {word: 'call', desc: '[ECMAScript] Function.call(Object: this_obj, p1, p2, p3, ...)'},
    {word: 'toFixed', desc: '[ECMAScript] Number.toFixed(Number: fractionDigits)'},
    {word: 'toExponential', desc: '[ECMAScript] Number.toExponential(Number: fractionDigits)'},
    {word: 'toPrecision', desc: '[ECMAScript] Number.toPrecision(Number: precision)'},
    {word: 'fromCharCode', desc: '[ECMAScript] String.fromCharCode(Number: code1, Number: code2, ...)'},
    {word: 'charAt', desc: '[ECMAScript] String.charAt(Number: pos)'},
    {word: 'charCodeAt', desc: '[ECMAScript] String.charCodeAt(Number: pos)'},
    {word: 'concat', desc: '[ECMAScript] String.concat(String: str1, String: str2, ....)'},
    {word: 'indexOf', desc: '[ECMAScript] String.indexOf(String: needle, Number: start)'},
    {word: 'lastIndexOf', desc: '[ECMAScript] String.lastIndexOf(String: needle, Number: start)'},
    {word: 'localeCompare', desc: '[ECMAScript] String.localeCompare(String: needle)'},
    {word: 'match', desc: '[ECMAScript] String.match(RegExp: pattern)'},
    {word: 'replace', desc: '[ECMAScript] String.replace(RegExp|String: pattern, String|Function: replacement)'},
    {word: 'search', desc: '[ECMAScript] String.search(RegExp|String: pattern)'},
    {word: 'slice', desc: '[ECMAScript] String.slice(Number: start, Number: end)'},
    {word: 'split', desc: '[ECMAScript] String.split(RegExp|String: separator, Number: limit)'},
    {word: 'substring', desc: '[ECMAScript] String.substring(Number: start, Number: end)'},
    {word: 'toLowerCase', desc: '[ECMAScript] String.toLowerCase()'},
    {word: 'toUpperCase', desc: '[ECMAScript] String.toUpperCase()'},
    {word: 'parse', desc: '[ECMAScript] Date.parse(String: string)'},
    {word: 'UTC', desc: '[ECMAScript] Date.UTC(year, month, date, hours, minutes, seconds, ms)'},
    {word: 'toUTCString', desc: '[ECMAScript] Date.toUTCString()'},
    {word: 'toDateString', desc: '[ECMAScript] Date.toDateString()'},
    {word: 'toTimeString', desc: '[ECMAScript] Date.toTimeString()'},
    {word: 'toLocaleString', desc: '[ECMAScript] Date.toLocaleString()'},
    {word: 'toLocaleDateString', desc: '[ECMAScript] Date.toLocaleDateString()'},
    {word: 'toLocaleTimeString', desc: '[ECMAScript] Date.toLocaleTimeString()'},
    {word: 'getTime', desc: '[ECMAScript] Date.getTime()'},
    {word: 'setTime', desc: '[ECMAScript] Date.setTime(Strint: str)'},
    {word: 'getFullYear', desc: '[ECMAScript] Date.getFullYear()'},
    {word: 'getUTCFullYear', desc: '[ECMAScript] Date.getUTCFullYear()'},
    {word: 'setFullYear', desc: '[ECMAScript] Date.setFullYear(year, month, date)'},
    {word: 'setUTCFullYear', desc: '[ECMAScript] Date.setUTCFullYear(year, month, date)'},
    {word: 'getMonth', desc: '[ECMAScript] Date.getMonth()'},
    {word: 'getUTCMonth', desc: '[ECMAScript] Date.getUTCMonth()'},
    {word: 'setMonth', desc: '[ECMAScript] Date.setMonth(month, date)'},
    {word: 'setUTCMonth', desc: '[ECMAScript] Date.setUTCMonth(month, date)'},
    {word: 'getDate', desc: '[ECMAScript] Date.getDate()'},
    {word: 'getUTCDate', desc: '[ECMAScript] Date.getUTCDate()'},
    {word: 'setDate', desc: '[ECMAScript] Date.setDate(date)'},
    {word: 'setUTCDate', desc: '[ECMAScript] Date.setUTCDate(date)'},
    {word: 'getHours', desc: '[ECMAScript] Date.getHours()'},
    {word: 'getUTCHours', desc: '[ECMAScript] Date.getUTCHours()'},
    {word: 'setHours', desc: '[ECMAScript] Date.setHours(hour, min, sec, ms)'},
    {word: 'setUTCHours', desc: '[ECMAScript] Date.setUTCHours(hour, min, sec, ms)'},
    {word: 'getMinutes', desc: '[ECMAScript] Date.getMinutes()'},
    {word: 'getUTCMinutes', desc: '[ECMAScript] Date.getUTCMinutes()'},
    {word: 'setMinutes', desc: '[ECMAScript] Date.setMinutes(min, sec, ms)'},
    {word: 'setUTCMinutes', desc: '[ECMAScript] Date.setUTCMinutes(min, sec, ms)'},
    {word: 'getSeconds', desc: '[ECMAScript] Date.getSeconds()'},
    {word: 'getUTCSeconds', desc: '[ECMAScript] Date.getUTCSeconds()'},
    {word: 'setSeconds', desc: '[ECMAScript] Date.setSeconds(sec, ms)'},
    {word: 'setUTCSeconds', desc: '[ECMAScript] Date.setUTCSeconds(sec, ms)'},
    {word: 'getMilliseconds()', desc: '[ECMAScript] Date.getMilliseconds()'},
    {word: 'getUTCMilliseconds()', desc: '[ECMAScript] Date.getUTCMilliseconds()'},
    {word: 'setMilliseconds', desc: '[ECMAScript] Date.setMilliseconds(ms)'},
    {word: 'setUTCMilliseconds', desc: '[ECMAScript] Date.setUTCMilliseconds(ms)'},
    {word: 'getTimezoneOffset', desc: '[ECMAScript] Date.getTimezoneOffset()'},
    {word: 'getDay', desc: '[ECMAScript] Date.getDay()'},
    {word: 'getUTCDay', desc: '[ECMAScript] Date.getUTCDay()'},
    {word: 'acos', desc: '[ECMAScript] Math.acos(Number: x)'},
    {word: 'asin', desc: '[ECMAScript] Math.asin(Number: x)'},
    {word: 'atan', desc: '[ECMAScript] Math.atan(Number: x)'},
    {word: 'atan2', desc: '[ECMAScript] Math.atan(Number: x, Number: y'},
    {word: 'cos', desc: '[ECMAScript] Math.cos(Number: x)'},
    {word: 'sin', desc: '[ECMAScript] Math.sin(Number: x)'},
    {word: 'tan', desc: '[ECMAScript] Math.tan(Number: x)'},
    {word: 'floor', desc: '[ECMAScript] Math.floor(Number: x)'},
    {word: 'ceil', desc: '[ECMAScript] Math.ceil(Number: x)'},
    {word: 'max', desc: '[ECMAScript] Math.max(num1, num2, ...)'},
    {word: 'min', desc: '[ECMAScript] Math.min(num1, num2, ...)'},
    {word: 'abs', desc: '[ECMAScript] Math.abs(Number: x)'},
    {word: 'log', desc: '[ECMAScript] Math.log(Number: x)'},
    {word: 'exp', desc: '[ECMAScript] Math.exp(Number: x)'},
    {word: 'sqrt', desc: '[ECMAScript] Math.sqrt(Number: x)'},
    {word: 'pow', desc: '[ECMAScript] Math.pow(Number: x, Number: y)'},
    {word: 'random', desc: '[ECMAScript] Math.random()'},
    {word: 'exec', desc: '[ECMAScript] RegExp.exec(String: str)'},
    {word: 'test', desc: '[ECMAScript] RegExp.test(String: str)'},
    {word: 'stringify', desc: '[JSON] JSON.stringify(obj)'},
    {word: 'parse', desc: '[JSON] JSON.parse(String: str)'},
    {word: 'toBe', desc: '[Jasmine] Matchers.toBe(expected)'},
    {word: 'toBeCloseTo', desc: '[Jasmine] Matchers.toBeCloseTo(expected, precision)'},
    {word: 'toBeDefined', desc: '[Jasmine] Matchers.toBeDefined()'},
    {word: 'toBeFalsy', desc: '[Jasmine] Matchers.toBeFalsy()'},
    {word: 'toBeGreaterThan', desc: '[Jasmine] Matchers.toBeGreaterThan(expected)'},
    {word: 'toBeLessThan', desc: '[Jasmine] Matchers.toBeLessThan(expected)'},
    {word: 'toBeNull', desc: '[Jasmine] Matchers.toBeNull()'},
    {word: 'toBeTruthy', desc: '[Jasmine] Matchers.toBeTruthy()'},
    {word: 'toBeUndefined', desc: '[Jasmine] Matchers.toBeUndefined()'},
    {word: 'toContain', desc: '[Jasmine] Matchers.toContain(expected)'},
    {word: 'toEqual', desc: '[Jasmine] Matchers.toEqual(expected)'},
    {word: 'toHaveBeenCalled', desc: '[Jasmine] Matchers.toHaveBeenCalled()'},
    {word: 'toHaveBeenCalledWith', desc: '[Jasmine] Matchers.toHaveBeenCalledWith()'},
    {word: 'toMatch', desc: '[Jasmine] Matchers.toMatch(expected)'},
    {word: 'toNotBe', desc: '[Jasmine] Matchers.toNotBe(expected)'},
    {word: 'toNotContain', desc: '[Jasmine] Matchers.toNotContain(expected)'},
    {word: 'toNotEqual', desc: '[Jasmine] Matchers.toNotEqual(expected)'},
    {word: 'toNotMatch', desc: '[Jasmine] Matchers.toNotMatch(expected)'},
    {word: 'toThrow', desc: '[Jasmine] Matchers.toThrow(expected)'},
    {word: 'wasNotCalled', desc: '[Jasmine] Matchers.wasNotCalled()'},
    {word: 'instantiate', desc: '[NGCOre] Core.Class'},
    {word: 'initialize', desc: '[NGCOre] Core.Class'},
    {word: 'singleton', desc: '[NGCOre] Core.Class'},
    {word: 'subclass', desc: '[NGCOre] Core.Class'}
];
